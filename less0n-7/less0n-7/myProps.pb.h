// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: myProps.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_myProps_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_myProps_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_myProps_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_myProps_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_myProps_2eproto;
class FullName;
struct FullNameDefaultTypeInternal;
extern FullNameDefaultTypeInternal _FullName_default_instance_;
class Student;
struct StudentDefaultTypeInternal;
extern StudentDefaultTypeInternal _Student_default_instance_;
class StudentGroup;
struct StudentGroupDefaultTypeInternal;
extern StudentGroupDefaultTypeInternal _StudentGroup_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::FullName* Arena::CreateMaybeMessage<::FullName>(Arena*);
template<> ::Student* Arena::CreateMaybeMessage<::Student>(Arena*);
template<> ::StudentGroup* Arena::CreateMaybeMessage<::StudentGroup>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class FullName final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FullName) */ {
 public:
  inline FullName() : FullName(nullptr) {}
  ~FullName() override;
  explicit PROTOBUF_CONSTEXPR FullName(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FullName(const FullName& from);
  FullName(FullName&& from) noexcept
    : FullName() {
    *this = ::std::move(from);
  }

  inline FullName& operator=(const FullName& from) {
    CopyFrom(from);
    return *this;
  }
  inline FullName& operator=(FullName&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FullName& default_instance() {
    return *internal_default_instance();
  }
  static inline const FullName* internal_default_instance() {
    return reinterpret_cast<const FullName*>(
               &_FullName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FullName& a, FullName& b) {
    a.Swap(&b);
  }
  inline void Swap(FullName* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FullName* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FullName* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FullName>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FullName& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FullName& from) {
    FullName::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FullName* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FullName";
  }
  protected:
  explicit FullName(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kSurnameFieldNumber = 2,
    kPatrFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string surname = 2;
  void clear_surname();
  const std::string& surname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_surname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_surname();
  PROTOBUF_NODISCARD std::string* release_surname();
  void set_allocated_surname(std::string* surname);
  private:
  const std::string& _internal_surname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_surname(const std::string& value);
  std::string* _internal_mutable_surname();
  public:

  // optional string patr = 3;
  bool has_patr() const;
  private:
  bool _internal_has_patr() const;
  public:
  void clear_patr();
  const std::string& patr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_patr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_patr();
  PROTOBUF_NODISCARD std::string* release_patr();
  void set_allocated_patr(std::string* patr);
  private:
  const std::string& _internal_patr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_patr(const std::string& value);
  std::string* _internal_mutable_patr();
  public:

  // @@protoc_insertion_point(class_scope:FullName)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr surname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr patr_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_myProps_2eproto;
};
// -------------------------------------------------------------------

class Student final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Student) */ {
 public:
  inline Student() : Student(nullptr) {}
  ~Student() override;
  explicit PROTOBUF_CONSTEXPR Student(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Student(const Student& from);
  Student(Student&& from) noexcept
    : Student() {
    *this = ::std::move(from);
  }

  inline Student& operator=(const Student& from) {
    CopyFrom(from);
    return *this;
  }
  inline Student& operator=(Student&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Student& default_instance() {
    return *internal_default_instance();
  }
  static inline const Student* internal_default_instance() {
    return reinterpret_cast<const Student*>(
               &_Student_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Student& a, Student& b) {
    a.Swap(&b);
  }
  inline void Swap(Student* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Student* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Student* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Student>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Student& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Student& from) {
    Student::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Student* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Student";
  }
  protected:
  explicit Student(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRatingsFieldNumber = 2,
    kFNameFieldNumber = 1,
    kAverageScoreFieldNumber = 3,
  };
  // repeated int32 ratings = 2;
  int ratings_size() const;
  private:
  int _internal_ratings_size() const;
  public:
  void clear_ratings();
  private:
  int32_t _internal_ratings(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_ratings() const;
  void _internal_add_ratings(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_ratings();
  public:
  int32_t ratings(int index) const;
  void set_ratings(int index, int32_t value);
  void add_ratings(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      ratings() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_ratings();

  // .FullName fName = 1;
  bool has_fname() const;
  private:
  bool _internal_has_fname() const;
  public:
  void clear_fname();
  const ::FullName& fname() const;
  PROTOBUF_NODISCARD ::FullName* release_fname();
  ::FullName* mutable_fname();
  void set_allocated_fname(::FullName* fname);
  private:
  const ::FullName& _internal_fname() const;
  ::FullName* _internal_mutable_fname();
  public:
  void unsafe_arena_set_allocated_fname(
      ::FullName* fname);
  ::FullName* unsafe_arena_release_fname();

  // float averageScore = 3;
  void clear_averagescore();
  float averagescore() const;
  void set_averagescore(float value);
  private:
  float _internal_averagescore() const;
  void _internal_set_averagescore(float value);
  public:

  // @@protoc_insertion_point(class_scope:Student)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > ratings_;
    mutable std::atomic<int> _ratings_cached_byte_size_;
    ::FullName* fname_;
    float averagescore_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_myProps_2eproto;
};
// -------------------------------------------------------------------

class StudentGroup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StudentGroup) */ {
 public:
  inline StudentGroup() : StudentGroup(nullptr) {}
  ~StudentGroup() override;
  explicit PROTOBUF_CONSTEXPR StudentGroup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StudentGroup(const StudentGroup& from);
  StudentGroup(StudentGroup&& from) noexcept
    : StudentGroup() {
    *this = ::std::move(from);
  }

  inline StudentGroup& operator=(const StudentGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline StudentGroup& operator=(StudentGroup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StudentGroup& default_instance() {
    return *internal_default_instance();
  }
  static inline const StudentGroup* internal_default_instance() {
    return reinterpret_cast<const StudentGroup*>(
               &_StudentGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StudentGroup& a, StudentGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(StudentGroup* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StudentGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StudentGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StudentGroup>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StudentGroup& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StudentGroup& from) {
    StudentGroup::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StudentGroup* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StudentGroup";
  }
  protected:
  explicit StudentGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStudentsFieldNumber = 1,
  };
  // repeated .Student students = 1;
  int students_size() const;
  private:
  int _internal_students_size() const;
  public:
  void clear_students();
  ::Student* mutable_students(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Student >*
      mutable_students();
  private:
  const ::Student& _internal_students(int index) const;
  ::Student* _internal_add_students();
  public:
  const ::Student& students(int index) const;
  ::Student* add_students();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Student >&
      students() const;

  // @@protoc_insertion_point(class_scope:StudentGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Student > students_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_myProps_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FullName

// string name = 1;
inline void FullName::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& FullName::name() const {
  // @@protoc_insertion_point(field_get:FullName.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FullName::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FullName.name)
}
inline std::string* FullName::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:FullName.name)
  return _s;
}
inline const std::string& FullName::_internal_name() const {
  return _impl_.name_.Get();
}
inline void FullName::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* FullName::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* FullName::release_name() {
  // @@protoc_insertion_point(field_release:FullName.name)
  return _impl_.name_.Release();
}
inline void FullName::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:FullName.name)
}

// string surname = 2;
inline void FullName::clear_surname() {
  _impl_.surname_.ClearToEmpty();
}
inline const std::string& FullName::surname() const {
  // @@protoc_insertion_point(field_get:FullName.surname)
  return _internal_surname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FullName::set_surname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.surname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FullName.surname)
}
inline std::string* FullName::mutable_surname() {
  std::string* _s = _internal_mutable_surname();
  // @@protoc_insertion_point(field_mutable:FullName.surname)
  return _s;
}
inline const std::string& FullName::_internal_surname() const {
  return _impl_.surname_.Get();
}
inline void FullName::_internal_set_surname(const std::string& value) {
  
  _impl_.surname_.Set(value, GetArenaForAllocation());
}
inline std::string* FullName::_internal_mutable_surname() {
  
  return _impl_.surname_.Mutable(GetArenaForAllocation());
}
inline std::string* FullName::release_surname() {
  // @@protoc_insertion_point(field_release:FullName.surname)
  return _impl_.surname_.Release();
}
inline void FullName::set_allocated_surname(std::string* surname) {
  if (surname != nullptr) {
    
  } else {
    
  }
  _impl_.surname_.SetAllocated(surname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.surname_.IsDefault()) {
    _impl_.surname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:FullName.surname)
}

// optional string patr = 3;
inline bool FullName::_internal_has_patr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FullName::has_patr() const {
  return _internal_has_patr();
}
inline void FullName::clear_patr() {
  _impl_.patr_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FullName::patr() const {
  // @@protoc_insertion_point(field_get:FullName.patr)
  return _internal_patr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FullName::set_patr(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.patr_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FullName.patr)
}
inline std::string* FullName::mutable_patr() {
  std::string* _s = _internal_mutable_patr();
  // @@protoc_insertion_point(field_mutable:FullName.patr)
  return _s;
}
inline const std::string& FullName::_internal_patr() const {
  return _impl_.patr_.Get();
}
inline void FullName::_internal_set_patr(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.patr_.Set(value, GetArenaForAllocation());
}
inline std::string* FullName::_internal_mutable_patr() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.patr_.Mutable(GetArenaForAllocation());
}
inline std::string* FullName::release_patr() {
  // @@protoc_insertion_point(field_release:FullName.patr)
  if (!_internal_has_patr()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.patr_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.patr_.IsDefault()) {
    _impl_.patr_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void FullName::set_allocated_patr(std::string* patr) {
  if (patr != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.patr_.SetAllocated(patr, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.patr_.IsDefault()) {
    _impl_.patr_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:FullName.patr)
}

// -------------------------------------------------------------------

// Student

// .FullName fName = 1;
inline bool Student::_internal_has_fname() const {
  return this != internal_default_instance() && _impl_.fname_ != nullptr;
}
inline bool Student::has_fname() const {
  return _internal_has_fname();
}
inline void Student::clear_fname() {
  if (GetArenaForAllocation() == nullptr && _impl_.fname_ != nullptr) {
    delete _impl_.fname_;
  }
  _impl_.fname_ = nullptr;
}
inline const ::FullName& Student::_internal_fname() const {
  const ::FullName* p = _impl_.fname_;
  return p != nullptr ? *p : reinterpret_cast<const ::FullName&>(
      ::_FullName_default_instance_);
}
inline const ::FullName& Student::fname() const {
  // @@protoc_insertion_point(field_get:Student.fName)
  return _internal_fname();
}
inline void Student::unsafe_arena_set_allocated_fname(
    ::FullName* fname) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fname_);
  }
  _impl_.fname_ = fname;
  if (fname) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Student.fName)
}
inline ::FullName* Student::release_fname() {
  
  ::FullName* temp = _impl_.fname_;
  _impl_.fname_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::FullName* Student::unsafe_arena_release_fname() {
  // @@protoc_insertion_point(field_release:Student.fName)
  
  ::FullName* temp = _impl_.fname_;
  _impl_.fname_ = nullptr;
  return temp;
}
inline ::FullName* Student::_internal_mutable_fname() {
  
  if (_impl_.fname_ == nullptr) {
    auto* p = CreateMaybeMessage<::FullName>(GetArenaForAllocation());
    _impl_.fname_ = p;
  }
  return _impl_.fname_;
}
inline ::FullName* Student::mutable_fname() {
  ::FullName* _msg = _internal_mutable_fname();
  // @@protoc_insertion_point(field_mutable:Student.fName)
  return _msg;
}
inline void Student::set_allocated_fname(::FullName* fname) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.fname_;
  }
  if (fname) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(fname);
    if (message_arena != submessage_arena) {
      fname = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fname, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.fname_ = fname;
  // @@protoc_insertion_point(field_set_allocated:Student.fName)
}

// repeated int32 ratings = 2;
inline int Student::_internal_ratings_size() const {
  return _impl_.ratings_.size();
}
inline int Student::ratings_size() const {
  return _internal_ratings_size();
}
inline void Student::clear_ratings() {
  _impl_.ratings_.Clear();
}
inline int32_t Student::_internal_ratings(int index) const {
  return _impl_.ratings_.Get(index);
}
inline int32_t Student::ratings(int index) const {
  // @@protoc_insertion_point(field_get:Student.ratings)
  return _internal_ratings(index);
}
inline void Student::set_ratings(int index, int32_t value) {
  _impl_.ratings_.Set(index, value);
  // @@protoc_insertion_point(field_set:Student.ratings)
}
inline void Student::_internal_add_ratings(int32_t value) {
  _impl_.ratings_.Add(value);
}
inline void Student::add_ratings(int32_t value) {
  _internal_add_ratings(value);
  // @@protoc_insertion_point(field_add:Student.ratings)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Student::_internal_ratings() const {
  return _impl_.ratings_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Student::ratings() const {
  // @@protoc_insertion_point(field_list:Student.ratings)
  return _internal_ratings();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Student::_internal_mutable_ratings() {
  return &_impl_.ratings_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Student::mutable_ratings() {
  // @@protoc_insertion_point(field_mutable_list:Student.ratings)
  return _internal_mutable_ratings();
}

// float averageScore = 3;
inline void Student::clear_averagescore() {
  _impl_.averagescore_ = 0;
}
inline float Student::_internal_averagescore() const {
  return _impl_.averagescore_;
}
inline float Student::averagescore() const {
  // @@protoc_insertion_point(field_get:Student.averageScore)
  return _internal_averagescore();
}
inline void Student::_internal_set_averagescore(float value) {
  
  _impl_.averagescore_ = value;
}
inline void Student::set_averagescore(float value) {
  _internal_set_averagescore(value);
  // @@protoc_insertion_point(field_set:Student.averageScore)
}

// -------------------------------------------------------------------

// StudentGroup

// repeated .Student students = 1;
inline int StudentGroup::_internal_students_size() const {
  return _impl_.students_.size();
}
inline int StudentGroup::students_size() const {
  return _internal_students_size();
}
inline void StudentGroup::clear_students() {
  _impl_.students_.Clear();
}
inline ::Student* StudentGroup::mutable_students(int index) {
  // @@protoc_insertion_point(field_mutable:StudentGroup.students)
  return _impl_.students_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Student >*
StudentGroup::mutable_students() {
  // @@protoc_insertion_point(field_mutable_list:StudentGroup.students)
  return &_impl_.students_;
}
inline const ::Student& StudentGroup::_internal_students(int index) const {
  return _impl_.students_.Get(index);
}
inline const ::Student& StudentGroup::students(int index) const {
  // @@protoc_insertion_point(field_get:StudentGroup.students)
  return _internal_students(index);
}
inline ::Student* StudentGroup::_internal_add_students() {
  return _impl_.students_.Add();
}
inline ::Student* StudentGroup::add_students() {
  ::Student* _add = _internal_add_students();
  // @@protoc_insertion_point(field_add:StudentGroup.students)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Student >&
StudentGroup::students() const {
  // @@protoc_insertion_point(field_list:StudentGroup.students)
  return _impl_.students_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_myProps_2eproto
